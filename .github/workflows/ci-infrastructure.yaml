name: 2 - Provisioning Infrastructure

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pull-requests: write
  security-events: write
  actions: write
  checks: write
  issues: write

jobs:
  iam:
    name: Provisioning Permissions IAM
    runs-on: ubuntu-latest
    environment: prd
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AW_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: ${{ secrets.AWS_STS }}
          role-session-name: GitHubActions-${{github.run_id}}

      - name: Terraform Format Check IAM
        uses: dflook/terraform-fmt-check@v1
        with:
          path: terraform/production/iam

      - name: Remove problematic IAM resource from Terraform state (customize resource address)
        working-directory: terraform/production/iam
        run: |
          # Replace aws_iam_policy.example with your actual resource address
          terraform state rm aws_iam_policy.example || echo "Resource not in state, skipping."

      - name: Provision Permissions IAM Initial Setup
        working-directory: terraform/production/iam
        run: terraform init -input=false -no-color

      - name: Provision Permissions Plan (with error output)
        working-directory: terraform/production/iam
        run: |
          terraform plan -out=tfplan || (echo "Plan failed, see above for details." && exit 1)

      - name: Provision IAM Permissions Apply (with error output)
        working-directory: terraform/production/iam
        run: |
          terraform apply -auto-approve || (echo "Apply failed, see above for details." && exit 1)
      # Manual rollback: If a resource fails, you can run
      # terraform destroy -target=<resource_address> in the working directory to clean up.

  s3:
    name: Provisioning S3 Infrastructure
    runs-on: ubuntu-latest
    environment: prd
    needs: iam
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AW_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: ${{ secrets.AWS_STS }}
          role-session-name: GitHubActions-${{github.run_id}}

      - name: Terraform Format Check S3
        uses: dflook/terraform-fmt-check@v1
        with:
          path: terraform/production/s3-storage

      - name: Provision S3 Initial Setup
        working-directory: terraform/production/s3-storage
        run: terraform init -input=false -no-color

      - name: Provision S3 Plan
        working-directory: terraform/production/s3-storage
        run: terraform plan -out=tfplan

      - name: Provision S3 Apply
        working-directory: terraform/production/s3-storage
        run: terraform apply -auto-approve
  sqs:
    name: Provisioning SQS Infrastructure
    runs-on: ubuntu-latest
    environment: prd
    needs: iam
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AW_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: ${{ secrets.AWS_STS }}
          role-session-name: GitHubActions-${{github.run_id}}

      - name: Terraform Format Check SQS
        uses: dflook/terraform-fmt-check@v1
        with:
          path: terraform/production/sqs-notifications

      - name: Provision SQS Initial Setup
        working-directory: terraform/production/sqs-notifications
        run: terraform init -input=false -no-color
      - name: Provision SQS Plan
        working-directory: terraform/production/sqs-notifications
        run: terraform plan -out=tfplan
      - name: Provision SQS Apply
        working-directory: terraform/production/sqs-notifications
        run: terraform apply -auto-approve

  secreter-manager-fast-api:
    name: Provisioning Secrets Manager Fast API Infrastructure
    runs-on: ubuntu-latest
    environment: prd
    needs: iam
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AW_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: ${{ secrets.AWS_STS }}
          role-session-name: GitHubActions-${{github.run_id}}

      - name: Terraform Format Check Secrets Manager Fast API
        uses: dflook/terraform-fmt-check@v1
        with:
          path: terraform/production/secret-manager

      - name: Provision Secret manager Initial Setup
        working-directory: terraform/production/secret-manager
        run: terraform init -input=false -no-color
      - name: Provision Secret manager Plan
        working-directory: terraform/production/secret-manager
        run: terraform plan -out=tfplan
      - name: Provision Secret manager Apply
        working-directory: terraform/production/secret-manager
        run: terraform apply -auto-approve

  ec2-fast-api:
    name: Provisioning EC2 Fast API Infrastructure
    runs-on: ubuntu-latest
    environment: prd
    needs: iam
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AW_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: ${{ secrets.AWS_STS }}
          role-session-name: GitHubActions-${{github.run_id}}

      - name: Terraform Format Check EC2 Fast API
        uses: dflook/terraform-fmt-check@v1
        with:
          path: terraform/production/ec2-fast-api-jwt
      - name: Provision EC2 Fast API Initial Setup
        working-directory: terraform/production/ec2-fast-api-jwt
        run: terraform init -input=false -no-color
      - name: Provision EC2 Fast API Plan
        working-directory: terraform/production/ec2-fast-api-jwt
        run: terraform plan -out=tfplan
      - name: Provision EC2 Fast API Apply
        working-directory: terraform/production/ec2-fast-api-jwt
        run: terraform apply -auto-approve

  ec2-self-hosted:
    name: Provisioning EC2 Self Hosted Runner Infrastructure
    runs-on: ubuntu-latest
    environment: prd
    needs: iam
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AW_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: ${{ secrets.AWS_STS }}
          role-session-name: GitHubActions-${{github.run_id}}

      - name: Terraform Format Check EC2 Self Hosted Runner
        uses: dflook/terraform-fmt-check@v1
        with:
          path: terraform/production/ec2-self-hosted
      - name: Provision EC2 Self Hosted Runner Initial Setup
        working-directory: terraform/production/ec2-self-hosted
        run: terraform init -input=false -no-color

      - name: Provision EC2 Self Hosted Runner Plan
        working-directory: terraform/production/ec2-self-hosted
        run: terraform plan -out=tfplan

      - name: Create runner registration token
        id: create_token
        run: |
           # Request a repository-level registration token for repo: ngelrojas/fast_api_jwt
           resp=$(curl -s -XPOST \
             -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
             -H "Accept: application/vnd.github+json" \
             https://api.github.com/repos/ngelrojas/fast_api_jwt/actions/runners/registration-token)
           token=$(echo "$resp" | python3 -c "import sys,json; print(json.load(sys.stdin)['token'])")
           echo "token=$token" >> $GITHUB_OUTPUT

      - name: Debug Generated Token
        run: |
          if [ -z "${{ steps.create_token.outputs.token }}" ]; then
            echo "ERROR: Generated token is NOT set or is empty!"
            exit 1
          else
            echo "DEBUG: Generated token is present and will be used."
          fi
      - name: Provision EC2 Self Hosted Runner Apply
        working-directory: terraform/production/ec2-self-hosted
        run: terraform apply -auto-approve -var="github_token=${{ steps.create_token.outputs.token }}"
